[tool.poetry]
name = "podcast-archiver"
version = "1.1.0"
description = "Archive all episodes from your favorite podcasts"
authors = ["Jan Willhaus <mail@janwillhaus.de>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "podcast_archiver" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Information Technology",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Topic :: Multimedia",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: System :: Archiving",
    "Topic :: Utilities",
]
repository = "https://codeberg.org/janw/podcast-archiver"

[tool.poetry.urls]
"Bug Reports" = "https://codeberg.org/janw/podcast-archiver/issues"

[tool.poetry.scripts]
podcast-archiver = 'podcast_archiver.cli:main'

[tool.poetry.dependencies]
python = "^3.10"
python-dateutil = "^2.8.2"
feedparser = "^6.0.10"
requests = "^2.29.0"
pydantic = "^2.5.3"
platformdirs = ">=3.4,<5.0"
pyyaml = "^6.0"
rich-click = "^1.7.2"
python-slugify = "^8.0.1"

[tool.poetry.group.dev.dependencies]
ipython = "<8.18"
ipdb = "*"
ruff = "^0.1.11"
pre-commit = "^3.2.2"
commitizen = "^3.13.0"
rich-codex = "^1.2.6"
mypy = "^1.8.0"


[tool.poetry.group.tests.dependencies]
pytest = "^7.3.1"
pytest-cov = "^4.0.0"
pytest-responses = "^0.5.1"
pytest-env = ">=0.8.1,<1.2.0"

[tool.commitizen]
version_scheme = "semver"
version_provider = "poetry"
version_files = [
    "pyproject.toml:version = ",
    "podcast_archiver/__init__.py",
    "README.md",
]
gpg_sign = true
annotated_tag = true
tag_format = "v$version"
update_changelog_on_bump = true
changelog_start_rev = "0.4"

[tool.ruff]
line-length = 120
target-version = "py310"
extend-select = [
    "I",   # isort
    "B",   # bugbear
    "A",   # builtins
    "ISC", # implicit-str-concat
    "Q",   # quotes
    "TID", # tidy-imports
    "C4",  # comprehensions
    "SIM", # simplify
    "C90", # mccabe
]
ignore = [
    "SIM108", # if-else-block-instead-of-if-exp
    "ISC001", # single-line-implicit-string-concatenation
]

[tool.ruff.format]
quote-style = "double"

[tool.ruff.mccabe]
max-complexity = 8

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests",]
addopts = "--cov podcast_archiver --cov-report term --no-cov-on-fail"

[tool.pytest_env]
PODCAST_ARCHIVER_CONFIG = ""
HOME = "/nonexistent"

[tool.coverage.run]
branch = true
source = [
    "podcast_archiver",
]

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:"
]
fail_under = 60
precision = 2
show_missing = true

[tool.mypy]
disallow_untyped_defs = true
disallow_any_generics = true
# disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
# warn_return_any = true
strict_optional = true
strict_equality = true
check_untyped_defs = true
no_implicit_reexport = true

packages = ["podcast_archiver", "tests"]
plugins = [
    "pydantic.mypy",
]

[[tool.mypy.overrides]]
module = [
    "feedparser.*",
    "requests.*",
    "slugify.*",
    "yaml.*",
]
ignore_missing_imports = true


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
